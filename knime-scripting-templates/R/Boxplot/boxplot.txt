########################################################################################
# name: Boxplot 
# author: Antje Janosch
# category: basic
# preview: 

Boxplot template

######

<rgg>
<!--1. Title and short description -->

<h3 text="Boxplot" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">Boxplot template</labelarea>
<gaprow height="1"/>

<separator label="Data Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection
<group>

measurements = c(<panellistbox label="select columns with values for boxplot" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

#define use of flow variables
<hbox>  
<checkbox label="use flow variable (meas)" var="useFlowVarForMeasurements" selected="false" />
<textfield label="flow variable (meas)" var="flowVarForMeasurement" data-type="text" default-value= "" size="10" />
</hbox>

<separator label="" span="full"/>

#define x-axis, grid and color group
<hbox>  
xFactor = c(<listbox label="x-axis" items="-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
<checkbox label="use flow variable (xFactor)" var="useFlowVarForXFactor" selected="false" />
<textfield label="flow variable (xFactor)" var="flowVarForXFactor" data-type="text" default-value= "" size="10" />
</hbox>

<separator label="" span="full"/>

<hbox>
facetBy = c(<listbox label="2D grid grouping parameters" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
<checkbox label="use flow variable (grid)" var="useFlowVarForGrid" selected="false" />
<textfield label="flow variable (grid)" var="flowVarForGrid" data-type="text" default-value= "" size="10" />
<vbox>
<vector  var="gridRows" label="2D grid [rows]" size="1" default-value="-AUTO-"/>
<vector  var="gridColumns" label="2D grid [columns]" size="1" default-value="-AUTO-"/>
</vbox>
</hbox>

<separator label="" span="full"/>

<hbox>
colorBy = c(<listbox label="colored by" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
<checkbox label="use flow variable (color)" var="useFlowVarForColor" selected="false" />
<textfield label="flow variable (color)" var="flowVarForColor" data-type="text" default-value= "" size="10" />
<combobox var="colorPalette" items="ggplot default,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>
</hbox>

<separator label="Boxplot Options" span="full"/>

<hbox>
<checkbox label="show outliers" var="showOutliers" selected="true" />
<checkbox label="show notches" var="showNotches" selected="false" />
</hbox>
<hbox>
<checkbox label="show single datapoints" var="showDatapoints" selected="false" />
</hbox>
<hbox>
jitterWidth = as.numeric(c(<vector label="jitter width [points]" size="1" default-value="0.25"/>))
<vector  var="pointSize" label="size [points]" size="1" default-value="3"/>
<vector  var="pointAlpha" label="alpha value [points]" size="1" default-value="0.7"/>
</hbox>

<separator label="Layout Options - Coordinate System (unflipped)" span="full"/>

<vbox>
<hbox>
<combobox var="yScales" items="free_y,fixed,custom" label="select mode for y-scales"/>
<vector  var="ylims" label="custom y-scales [ymin,ymax]" size="2" default-value=""/>
</hbox>
<hbox>
<checkbox label="log10 y-transformation" var="useLog10" selected="false" />
<checkbox label="flip x/y coordinates" var="flipCoords" selected="false" />
</hbox>
</vbox>

<separator label="Layout Options - Axes (unflipped)" span="full"/>

<hbox>
<vbox>
<textfield label="x-Axis title" var="xAxisTitle" data-type="text" default-value= "" size="10" />
<textfield label="y-axis title" var="yAxisTitle" data-type="text" default-value= "" size="10" />
</vbox>
<vbox>
<combobox var="xAxisOrientation" items="0,45,90" label="angle of x-axis"/>
<combobox var="yAxisOrientation" items="0,45,90" label="angle of y-axis"/>
</vbox>
</hbox>

<separator label="Layout Options - General" span="full"/>

<textfield label="plot title" var="plotTitle" data-type="text" default-value= "" size="10" />
<hbox>
<combobox var="plotTheme" items="black-white,grey,linedraw,light,classic,minimal" label="plot theme"/>
<vector  var="baseSize" label="base font size" size="1" default-value="18"/>
</hbox>

<separator label="Layout Options - Legend" span="full"/>

<textfield label="legend title" var="legendTitle" data-type="text" default-value= "" size="10" />
<hbox>
<combobox var="legendPosition" items="right,left,bottom,top,none,custom position" label="legend position"/>
<vector  var="legendCoordinates" label="custom legend x/y coordinates [0;1]" size="2" default-value=""/>
</hbox>

</group>

# 2. r-code
<![CDATA[

library(ggplot2)
library(dplyr)
library(tidyr)

# check use of flowvars for measurements
if(useFlowVarForXFactor) xFactor <- flowVarForXFactor
if(useFlowVarForGrid) facetBy <- flowVarForGrid
if(useFlowVarForColor) colorBy <- flowVarForColor

# no measurement and/or factor column(s) selected
if(is.null(measurements)) stop("Error: Template initialization fails - no column(s) for bar height selected") 
if(is.null(xFactor)) stop("Error: Template initialization fails - no column(s) for x-axis selected") 

keepColumns <- measurements

multiXFactor <- FALSE
# xFactor should never be NULL
if("-USE COLUMN SELECTION-" %in% xFactor) {
  xFactor <- "variable"
} else {
  keepColumns <- c(keepColumns, xFactor)
  if(length(xFactor) >= 2) multiXFactor <- TRUE
}

multiFacetBy <- FALSE
if("-NO SELECTION-" %in% facetBy)
  facetBy = NULL
if("-USE COLUMN SELECTION-" %in% facetBy) {
  facetBy <- "variable"
} else {
  if(!is.null(facetBy)) {
    keepColumns <- c(keepColumns, facetBy)
    if(length(facetBy) >= 2) multiFacetBy <- TRUE
  }
}

multiColorBy <- FALSE
if("-NO SELECTION-" %in% colorBy)
  colorBy = NULL
if("-USE COLUMN SELECTION-" %in% colorBy) {
  colorBy <- "variable"
} else {
  if(!is.null(colorBy)) {
    keepColumns <- c(keepColumns, colorBy)
    if(length(colorBy) >= 2) multiColorBy <- TRUE
  }
}

# yScales can be "free_y", "fixed", "custom"
gg_scales <- yScales
gg_ylims <- NULL
if(yScales == "custom") {
  gg_ylims <- as.numeric(ylims)
  if(any(is.na(gg_ylims)))
    stop("Error: Template initialization fails - custom y-limits do require numerical min/max values") 
  if(gg_ylims[1] >= gg_ylims[2])
    stop("Error: Template initialization fails - custom y-limits min has to be smaller than max") 
  gg_scales = "fixed"
}
if(yScales == "free_y" && flipCoords) {
  gg_scales = "free_x"
}

# 2D grid rows/columns, default = -AUTO-
gg_facetRows <- NULL
gg_facetColumns <- NULL
if(gridRows != "-AUTO-") {
  gg_facetRows <- as.numeric(gridRows)
  if(any(is.na(gg_facetRows)))
    stop("Error: Template initialization fails - number of 2D grid rows does require a numerical value")
}
if(gridColumns != "-AUTO-") {
  gg_facetColumns <- as.numeric(gridColumns)
  if(any(is.na(gg_facetColumns)))
    stop("Error: Template initialization fails - number of 2D grid rows does require a numerical value")
}

gg_pointSize <- as.numeric(pointSize)
if(is.na(gg_pointSize)) {
  stop("Error: Template initialization fails - point size does require a numerical value")
}
gg_pointAlpha <- as.numeric(pointAlpha)
if(is.na(gg_pointAlpha)) {
  stop("Error: Template initialization fails - alpha value [points] does require a numerical value")
}

gg_xAxisAngle <- NULL
gg_yAxisAngle <- NULL
if(flipCoords) {
  gg_xAxisAngle <- 90 - as.numeric(yAxisOrientation) 
  gg_yAxisAngle <- 90 - as.numeric(xAxisOrientation) 
} else {
  gg_xAxisAngle <- as.numeric(xAxisOrientation)
  gg_yAxisAngle <- as.numeric(yAxisOrientation) 
}

gg_baseSize <- 14
if(!is.na(as.numeric(baseSize))) gg_baseSize <- as.numeric(baseSize) else stop("Error: Template initialization fails - plot base size does require a numerical value")

gg_title <- waiver()
if(!is.na(plotTitle)) gg_title <- plotTitle

gg_legendPosition <- legendPosition
if(legendPosition == "custom position") {
  if(!any(is.na(as.numeric(legendCoordinates)))) gg_legendPosition <- as.numeric(legendCoordinates)
  else stop("Error: Template initialization fails - custom legend position do require numerical values")
}

if(!is.null(colorBy) && colorPalette == "KNIME colors") {
  if(!exists("kIn.color.model"))
    stop("Error: Template initialization fails - KNIME colors are not set.")
  if(colorBy != names(kIn.color.model[1]))
    stop("Error: Template initialization fails - KNIME colors are not set for selected color column.")
}

gg_colorPalette <- colorPalette
if(colorPalette == "ggplot default") gg_colorPalette <- 1

# if outliers should be displayed, set outlier shape to NULL (default)
outlierShape <- NA
if(showOutliers)
  outlierShape <- NULL
# if datapoints should be displayed too, hide outliers with outlier shape = NA
if(showDatapoints)
  outlierShape <- NA

keepColumns <- unique(keepColumns)
subdata <- kIn %>% select(all_of(keepColumns))

if(multiXFactor) {
  columnHeader <- paste(xFactor, collapse = " + ")
  subdata <- subdata %>% unite({{columnHeader}}, all_of(xFactor), sep = " + ", remove = FALSE)
  xFactor <- columnHeader
}
if(multiFacetBy) {
  columnHeader <- paste(facetBy, collapse = " + ")
  subdata <- subdata %>% unite({{columnHeader}}, all_of(facetBy), sep = " + ", remove = FALSE)
  facetBy <- columnHeader
}
if(multiColorBy) {
  columnHeader <- paste(colorBy, collapse = " + ")
  subdata <- subdata %>% unite({{columnHeader}}, all_of(colorBy), sep = " + ", remove = FALSE)
  colorBy <- columnHeader
}

# ---------------------------------------------------------------------------------------------------
# reshape data for plot
data <- subdata %>% pivot_longer(all_of(measurements), names_to = "variable", values_to = "value")
#fix integer columns
data <- data %>% mutate(across(c(where(is.integer),-one_of("value", colorBy)), as.character))
# create column for grouping data
groupByCols <- c(xFactor)
if(!is.null(colorBy)) groupByCols[2] <- colorBy
data <- data %>% group_by(across(all_of(groupByCols))) %>% mutate(gg_groupID = cur_group_id())

# flag color scale
if(!is.null(colorBy)) {
  isColorDiscrete <- !(data %>% pull(get(colorBy)) %>% is.numeric)
  useKNIMEColors <- colorPalette == "KNIME colors"
}

# ---------------------------------------------------------------------------------------------------
# further ggplot configurations

# axis titles and orientation
if(is.na(xAxisTitle)) {
  xAxisTitle <- xFactor
}
if(is.na(yAxisTitle)) {
  # if multiple parameters have been selected use a fixed y-axis title else take the measurement name
  if(length(measurements) > 1) yAxisTitle <- "measurement values" else yAxisTitle <- measurements[1]
}
gg_xAxisTitle <- waiver()
gg_yAxisTitle <- waiver()
if(!flipCoords) {
  gg_xAxisTitle <- xAxisTitle 
  gg_yAxisTitle <- yAxisTitle
} else {
  gg_xAxisTitle <- yAxisTitle 
  gg_yAxisTitle <- xAxisTitle
}

gg_legendTitle <- waiver()
if(!is.na(legendTitle)) {
  gg_legendTitle <- legendTitle
} else {
  gg_legendTitle <- colorBy
}

# ---------------------------------------------------------------------------------------------------
# plot data
p <- ggplot(data, aes(x = get(xFactor), y = value, group = gg_groupID)) + geom_boxplot(notch = showNotches, outlier.shape = outlierShape)
if(!is.null(colorBy)) {
  p <- p + aes(fill = get(colorBy))
  if(isColorDiscrete) {
    gg_colorLevels <- levels(data %>% group_by(get(colorBy)) %>% summarise() %>% pull())
    if(useKNIMEColors) {
      gg_colors <- kIn.color.model %>% arrange(match(get(colorBy), gg_colorLevels)) %>% pull(color)
      p <- p + scale_fill_manual(values = gg_colors, breaks = gg_colorLevels)
    } else {
      if(gg_colorPalette == 1) {
        p <- p + scale_fill_hue(breaks = gg_colorLevels)
      } else {
        p <- p + scale_fill_brewer(palette = gg_colorPalette, breaks = gg_colorLevels)
      }
    }
  }
} else { #continuous scale
  if(useKNIMEColors) {
    p <- p + scale_fill_gradientn(colors = kIn.color.model$color, limits = kIn.color.model[[colorBy]])
  } else {
    p <- p + scale_fill_distiller(palette = gg_colorPalette, direction = 1)
  }
}


if(showDatapoints) {
  if(!is.null(colorBy)) p <- p + geom_point(position = position_jitterdodge(jitter.width = jitterWidth), shape=21, size = gg_pointSize, alpha = gg_pointAlpha)
  else p <- p + geom_point(position = position_jitter(width = jitterWidth), shape=21, size = gg_pointSize, alpha = gg_pointAlpha)
}

if(!is.null(facetBy)) p <- p + facet_wrap( ~ get(facetBy), scales = gg_scales, nrow = gg_facetRows, ncol = gg_facetColumns)

if(plotTheme == "black-white") p <- p + theme_bw(base_size = gg_baseSize)
if(plotTheme == "grey") p <- p + theme_grey(base_size = gg_baseSize)
if(plotTheme == "linedraw") p <- p + theme_linedraw(base_size = gg_baseSize)
if(plotTheme == "light") p <- p + theme_light(base_size = gg_baseSize)
if(plotTheme == "classic") p <- p + theme_classic(base_size = gg_baseSize)
if(plotTheme == "minimal") p <- p + theme_minimal(base_size = gg_baseSize)

if(useLog10) p <- p + scale_y_log10()
if(flipCoords) p <- p + coord_flip(ylim = gg_ylims) else p <- p + coord_cartesian(ylim = gg_ylims)
p <- p + guides(x = guide_axis(title = gg_xAxisTitle, angle = gg_xAxisAngle), y = guide_axis(title = gg_yAxisTitle, angle = gg_yAxisAngle))
p <- p + labs(title = gg_title, fill = gg_legendTitle)
p <- p + theme(legend.position = gg_legendPosition)

print(p)

]]>
</rgg>