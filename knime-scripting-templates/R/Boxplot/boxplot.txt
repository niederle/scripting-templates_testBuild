########################################################################################
# name: Boxplot 
# author: Antje Janosch
# category: basic
# preview: 

Boxplot template

######

<rgg>
<!--1. Title and short description -->

<h3 text="Boxplot" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">Boxplot template</labelarea>
<gaprow height="1"/>

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection
<group>

measurements = c(<panellistbox label="select columns with values for boxplot" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

#define use of flow variables
<hbox>  
<checkbox label="use flow variable" var="useFlowVarForMeasurements" selected="false" />
<textfield label="flow variable:" var="flowVarForMeasurement" data-type="text" default-value= "" size="10" />
</hbox>

<separator label="" span="full"/>

#define x-axis, grid and color group
<hbox>  
xFactor = c(<listbox label="x-axis" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
facetBy = c(<listbox label="2D grid grouping parameters" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
colorBy = c(<listbox label="colored by" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
</hbox>

<combobox var="colorPalette" items="ggplot default,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>

<separator label="" span="full"/>

<hbox>
<checkbox label="show outliers" var="showOutliers" selected="true" />
<checkbox label="show notches" var="showNotches" selected="false" />
</hbox>
<hbox>
<checkbox label="show single datapoints" var="showDatapoints" selected="false" />
jitterWidth = as.numeric(c(<vector label="jitter width of points:" size="1" default-value="0.5"/>))
</hbox>

</group>

# 2. r-code
<![CDATA[

library(ggplot2)
library(dplyr)
library(tidyr)

#TODO: check use of flowvars for measurements

# no measurement and/or factor column(s) selected
if(is.null(measurements)) stop("Error: Template initialization fails - no column(s) for bar height selected") 
if(is.null(xFactor)) stop("Error: Template initialization fails - no column(s) for x-axis selected") 

# if outliers should be displayed, set outlier shape to NULL (default)
outlierShape <- NA
if(showOutliers)
  outlierShape <- NULL
# if datapoints should be displayed too, hide outliers with outlier shape = NA
if(showDatapoints)
  outlierShape <- NA

keepColumns <- measurements

# xFactor should never be NULL
if("-ROW ID-" %in% xFactor)
  # TODO
if("-USE COLUMN SELECTION-" %in% colorBy)
  xFactor <- measurements
keepColumns <- c(keepColumns, xFactor)

pivotBy = NULL
if("-NO SELECTION-" %in% facetBy)
  facetBy = NULL
if("-USE COLUMN SELECTION-" %in% facetBy)
  facetBy <- measurements
if(!is.null(facetBy)) {
  pivotBy <- facetBy
  keepColumns <- c(keepColumns, facetBy)
}

if("-NO SELECTION-" %in% colorBy)
  colorBy = NULL
if("-USE COLUMN SELECTION-" %in% colorBy)
  colorBy <- measurements
if(!is.null(colorBy)) {
  keepColumns <- c(keepColumns, colorBy)
}

keepColumns <- unique(keepColumns)
subdata <- kIn %>% select(all_of(keepColumns))

# combine columns if multiple selection
if(length(xFactor) >= 2) {
  columnHeader <- paste(xFactor, collapse = " + ")
  subdata <- subdata %>% unite({{columnHeader}}, all_of(xFactor), sep = " + ", remove = FALSE)
  xFactor <- columnHeader
}
if(length(colorBy) >= 2) {
  columnHeader <- paste(colorBy, collapse = " + ")
  subdata <- subdata %>% unite({{columnHeader}}, all_of(colorBy), sep = " + ", remove = FALSE)
  colorBy <- columnHeader
}

data <- subdata %>% pivot_longer(all_of(pivotBy), names_to = "variable", values_to = "value")

p <- ggplot(data, aes(x = get(xFactor), y = value)) + geom_boxplot(notch = showNotches, outlier.shape = outlierShape)
if(!is.null(colorBy))
  p <- p + aes(fill = get(colorBy))

if(showDatapoints) {
  if(!is.null(colorBy)) p <- p + geom_point(position = position_jitterdodge(jitter.width = jitterWidth), shape=21)
  else p <- p + geom_point(position = position_jitter(width = jitterWidth), shape=21)
}



p <- p + facet_wrap( ~ variable, scales = "free")

print(p)


]]>
</rgg>